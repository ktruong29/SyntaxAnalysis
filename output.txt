Token: Keyword	Lexeme: for
begin <S> <MS> end ;
Token: Keyword	Lexeme: int
<Statement> -> <Declarative>
<Type> -> bool | float | int | double | string | char
Token: Identifier	Lexeme: i
DPrime -> epsilon.
Token: Separator	Lexeme: ;
Token: Identifier	Lexeme: i
<Statement> -> <Assign>
<Assign> ->  <Identifier>  = <Expression>
Token: Operator	Lexeme: =
Token: Integer	Lexeme: 0
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> num
<TPrime> -> epsilon.
<EPrime> -> epsilon.
Token: Separator	Lexeme: ;
Token: Identifier	Lexeme: a
<Statement> -> <Assign>
<Assign> ->  <Identifier>  = <Expression>
Token: Operator	Lexeme: =
Token: Identifier	Lexeme: b
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier>
<TPrime> -> epsilon.
Token: Operator	Lexeme: +
<EPrime> -> + <Term> <EPrime>
Token: Identifier	Lexeme: c
<Term> -> <Factor> <Term Prime>
Token: Identifier	Lexeme: c
<Factor> -> <Identifier>
<TPrime> -> epsilon.
<EPrime> -> epsilon.
<MS> -> epsilon
Token: Keyword	Lexeme: endfor
Token: Separator	Lexeme: ;
It's a for loop statement

