Token: Identifier	Lexeme: double
<Statement> -> <Declarative>
<Type> -> bool | float | int | double | string | char
Token: Identifier	Lexeme: avg
DPrime -> epsilon.
Here
It's a declarative statement

Token: Keyword	Lexeme: int
<Statement> -> <Declarative>
<Type> -> bool | float | int | double | string | char
Token: Identifier	Lexeme: num1
Token: Separator	Lexeme: ,
<D_Prime> -> <,> <I> <D_Prime> | epsilon
Token: Identifier	Lexeme: num2
DPrime -> epsilon.
Here
It's a declarative statement

Token: Identifier	Lexeme: avg
<Statement> -> <Assign>
<Assign> ->  <Identifier>  = <Expression>
Token: Operator	Lexeme: =
Token: Separator	Lexeme: (
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> ( <Expression> )
Token: Identifier	Lexeme: num1
<Expression> -> <Term> <Expression Prime>
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier>
<TPrime> -> epsilon.
Token: Operator	Lexeme: +
<EPrime> -> + <Term> <EPrime>
Token: Identifier	Lexeme: num2
<Term> -> <Factor> <Term Prime>
<Factor> -> <Identifier>
<TPrime> -> epsilon.
<EPrime> -> epsilon.
Token: Separator	Lexeme: )
Token: Operator	Lexeme: /
<TPrime> -> / <Factor> <TPrime>
<Factor> -> num
<TPrime> -> epsilon.
<EPrime> -> epsilon.
Token: Separator	Lexeme: ;
It's an assignment statement

